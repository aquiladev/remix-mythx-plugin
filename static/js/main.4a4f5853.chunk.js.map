{"version":3,"sources":["App.js","components/Notifier.js","components/Home.js","images/remix.svg","images/mythx.png","images/plus.svg","lib/report.js","components/IssueSteps.js","components/Issue.js","components/Report.js","components/Log.js","components/InfoIcon.js","components/Plugin.js","serviceWorker.js","index.js","lib/eslint.js","components/Footer.js","lib/utils.js"],"names":["separator","storageKey","TRIAL_CREDS","address","pwd","client","App","props","analyze","a","mode","state","compilations","selected","analyses","reports","split","target","mythx","Client","login","jwt","setState","isAnalyzig","call","options","getRequestData","analysis","logAnalysis","uuid","getDetectedIssues","issues","pluginActiveTab","handleResult","source","list","messages","error","message","highlightIssue","issue","line","position","start","column","end","endLine","endCol","color","severity","filePath","raw","localStorage","getItem","appState","JSON","parse","pluginOpen","contractList","mapping","alerts","log","createIframeClient","onload","then","result","data","processCompilation","on","_","bind","saveCredentials","clear","selectContract","addAlert","dismissAlert","this","contracts","file","fileMapping","Object","keys","forEach","x","bytecode","evm","deployedBytecode","object","hash","keccak","update","Buffer","from","digest","contractSet","Set","getContracts","Array","map","setItem","stringify","newState","timestamp","Date","getTime","loginWithToken","err","contract","sources","request","contractName","utils","replaceLinkedLibs","sourceMap","deployedSourceMap","analysisMode","mainSource","sourceList","key","hasOwnProperty","ast","src","content","uniqueIssues","formatIssues","length","type","text","id","alert","idx","indexOf","slice","style","minHeight","changeTab","tab","isPlugin","onDismiss","React","Component","Notifier","timeout","showIcon","Home","className","background","height","textAlign","href","rel","remixLogo","alt","width","verticalAlign","plus","mythxLogo","module","exports","mythx2Severity","High","Medium","decoder","SourceMappingDecoder","issue2EsLint","locations","swcLink","swcID","esIssue","fatal","ruleId","ruleLink","description","head","tail","sourceType","origin","startLineCol","endLineCol","lineBreakPositions","getLinebreakPositions","srcEntry","ary","sourceLocation","parseInt","loc","convertOffsetToLineColumn","textSrcEntry2lineColumn","results","report","functionHashes","textLocationFilterFn","location","sourceFormat","k","filter","undefined","sourceCode","fileName","match","exec","getSourceIndex","errorCount","warningCount","fixableErrorCount","fixableWarningCount","push","reduce","acc","isFatal","values","convertMythXReport2EsIssue","eslintIssues","curr","concat","getUniqueIssues","KnownAddressMap","IssueSteps","extra","testCases","fontSize","tc","i","steps","s","j","knownAddress","value","name","input","decodedInput","Issue","useState","isOpen","setIsOpen","onClick","icon","faAngleDown","faAngleRight","title","faCode","Collapse","Report","role","issueCount","summary","amount","caption","m","Log","link","moment","format","faClock","InfoIcon","children","placement","faInfoCircle","Tooltip","autohide","toggle","Plugin","creadOpen","cursor","right","top","lineHeight","paddingRight","htmlFor","aria-describedby","placeholder","onChange","e","defaultValue","disabled","faTrash","aria-hidden","fontWeight","Nav","tabs","NavItem","NavLink","TabContent","activeTab","TabPane","tabId","onCopy","faClipboard","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","restProps","uniqueMessages","accum","v","getUniqueMessages","calculateWarnings","calculateErrors","Footer","bottom","packageJson","version","regex","RegExp","removeRelativePathFromUrl","url","replace","byteCode"],"mappings":"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","file":"static/js/main.4a4f5853.chunk.js","sourcesContent":["import React from 'react';\nimport { createIframeClient } from '@remixproject/plugin';\nimport { Client } from 'mythxjs';\nimport keccak from 'keccakjs';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport Plugin from './components/Plugin';\nimport Footer from './components/Footer';\nimport Notifier from './components/Notifier';\nimport Home from './components/Home';\nimport { formatIssues } from './lib/report';\nimport utils from './lib/utils';\n\nconst separator = '::';\nconst storageKey = 'remix-mythx-plugin';\nconst TRIAL_CREDS = {\n  address: '0x0000000000000000000000000000000000000000',\n  pwd: 'trial'\n};\nconst token_invalid_msg = 'Access token has expired or is invalid! Please login again.';\n\nlet client = {};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const raw = localStorage.getItem(storageKey) || '{}';\n    const appState = JSON.parse(raw);\n    const address = appState.address || TRIAL_CREDS.address;\n\n    this.state = {\n      pluginOpen: false,\n      address,\n      pwd: appState.pwd || TRIAL_CREDS.pwd,\n      jwt: null,\n      compilations: {},\n      selected: '',\n      contractList: [],\n      mapping: {},\n      isAnalyzig: false,\n      analyses: {},\n      reports: {},\n      alerts: [],\n      log: appState.log || [],\n      pluginActiveTab: 'log'\n    };\n\n    client = createIframeClient();\n    client.onload(() => {\n      this.setState({ pluginOpen: true });\n\n      client.call('solidity', 'getCompilationResult')\n        .then((result) => {\n          if (!result) {\n            return;\n          }\n\n          const { data, source } = result;\n\n          if (!source) {\n            return;\n          }\n\n          this.processCompilation(source.target, source, data);\n        });\n\n      client.on('solidity', 'compilationFinished', (target, source, _, data) => {\n        this.processCompilation(target, source, data);\n      });\n    })\n\n    this.processCompilation = this.processCompilation.bind(this);\n    this.login = this.login.bind(this);\n    this.saveCredentials = this.saveCredentials.bind(this);\n    this.logAnalysis = this.logAnalysis.bind(this);\n    this.analyze = this.analyze.bind(this);\n    this.getRequestData = this.getRequestData.bind(this);\n    this.handleResult = this.handleResult.bind(this);\n    this.highlightIssue = this.highlightIssue.bind(this);\n    this.clear = this.clear.bind(this);\n    this.selectContract = this.selectContract.bind(this);\n    this.addAlert = this.addAlert.bind(this);\n    this.dismissAlert = this.dismissAlert.bind(this);\n  }\n\n  processCompilation(target, source, data) {\n    const { compilations, contractList, mapping } = this.state;\n\n    const { contracts = [] } = data;\n    const file = contracts[target];\n    const fileMapping = {};\n\n    Object.keys(file).forEach(x => {\n      const bytecode = file[x].evm.deployedBytecode.object;\n      const hash = new keccak(256);\n      hash.update(Buffer.from(bytecode, 'hex'));\n\n      fileMapping[target] = target;\n      fileMapping[`0x${hash.digest('hex')}`] = target;\n    })\n\n    const list = Object.keys(data.contracts[target]);\n    const contractSet = new Set([...contractList, ...this.getContracts(data, target)]);\n    this.setState({\n      compilations: { ...compilations, [target]: { source, data } },\n      selected: `${target}${separator}${list[0]}`,\n      contractList: Array.from(contractSet),\n      mapping: { ...mapping, ...fileMapping }\n    });\n  }\n\n  getContracts(data, target) {\n    const { contracts = [] } = data;\n    var file = contracts[target] || {};\n    return Object.keys(file).map(x => `${target}${separator}${x}`);\n  }\n\n  saveCredentials(address, pwd) {\n    this.setState({ address, pwd });\n    localStorage.setItem(storageKey, JSON.stringify({ address, pwd }));\n    this.addAlert('success', 'Saved');\n  }\n\n  logAnalysis(uuid, mode) {\n    const raw = localStorage.getItem(storageKey) || '{}';\n    const state = JSON.parse(raw);\n    const newState = {\n      ...state,\n      ...{\n        log: [\n          { timestamp: new Date().getTime(), uuid, mode },\n          ...(state.log || [])\n        ]\n      }\n    }\n    localStorage.setItem(storageKey, JSON.stringify(newState));\n    this.setState({ log: newState.log });\n  }\n\n  analyze = async (mode = 'quick') => {\n    const { address, pwd, compilations, selected, analyses, reports } = this.state;\n    const [target] = selected.split(separator);\n\n    try {\n      const mythx = new Client(address, pwd, 'remythx');\n      const jwt = await this.login(mythx);\n\n      this.setState({\n        analyses: { ...analyses, [selected]: null },\n        isAnalyzig: true,\n        jwt\n      });\n      await client.call('editor', 'discardHighlight');\n\n      const options = this.getRequestData(mode);\n      const analysis = await mythx.analyze(options);\n      this.logAnalysis(analysis.uuid, mode);\n\n      if (mode === 'quick') {\n        const issues = await mythx.getDetectedIssues(analysis.uuid);\n\n        this.setState({\n          analyses: { ...analyses, [selected]: issues },\n          isAnalyzig: false,\n          pluginActiveTab: 'report'\n        });\n\n        this.handleResult(compilations[target].source, issues);\n      } else {\n        this.setState({\n          isAnalyzig: false,\n          pluginActiveTab: 'log'\n        });\n      }\n    } catch (err) {\n      this.setState({\n        analyses: { ...analyses, [selected]: null },\n        reports: {\n          ...reports,\n          [selected]: {\n            list: [{\n              messages: [{\n                error: err.message || err\n              }]\n            }]\n          }\n        },\n        isAnalyzig: false,\n        pluginActiveTab: 'report'\n      });\n    }\n  }\n\n  login(client) {\n    let jwt = this.state.jwt;\n\n    if (jwt) {\n      try {\n        client.loginWithToken(jwt);\n        return jwt;\n      } catch (err) {\n        if (err.message !== token_invalid_msg) {\n          throw err;\n        }\n      }\n    }\n\n    return client.login();\n  }\n\n  getRequestData(mode) {\n    const { compilations, selected } = this.state;\n    const [target, contract] = selected.split(separator);\n    const { data = {}, source = {} } = compilations[target];\n    const { contracts = [], sources = {} } = data;\n\n    const file = contracts[target];\n    const bytecode = file[contract].evm.bytecode;\n    const deployedBytecode = file[contract].evm.deployedBytecode;\n    const request = {\n      contractName: contract,\n      bytecode: utils.replaceLinkedLibs(bytecode.object),\n      sourceMap: bytecode.sourceMap,\n      deployedBytecode: utils.replaceLinkedLibs(deployedBytecode.object),\n      deployedSourceMap: deployedBytecode.sourceMap,\n      analysisMode: mode,\n      mainSource: target,\n      sourceList: Object.keys(source.sources),\n      sources: {}\n    };\n\n    // eslint-disable-next-line no-unused-vars\n    for (let key in source.sources) {\n      if (source.sources.hasOwnProperty(key)) {\n        const ast = sources[key].ast;\n        const src = source.sources[key].content;\n\n        request.sources[key] = { ast, source: src };\n      }\n    }\n\n    return request;\n  }\n\n  handleResult(data, result) {\n    const { selected, reports, mapping } = this.state;\n    const uniqueIssues = formatIssues(data, mapping, result);\n\n    if (uniqueIssues.length === 0) {\n      this.setState({\n        reports: {\n          ...reports,\n          [selected]: {\n            message: `✔ No errors/warnings found in ${selected}`\n          }\n        }\n      });\n    } else {\n      this.setState({\n        reports: {\n          ...reports,\n          [selected]: {\n            list: uniqueIssues\n          }\n        }\n      });\n    }\n  }\n\n  highlightIssue = async (issue, message) => {\n    if (message.line < 0) {\n      return;\n    }\n\n    const position = {\n      start: { line: message.line, column: message.column },\n      end: { line: message.endLine, column: message.endCol }\n    }\n    const color = message.severity === 1 ? '#ffd300' : '#ff0000';\n    await client.call('editor', 'highlight', position, issue.filePath, color);\n  }\n\n  clear() {\n    this.setState({\n      compilations: {},\n      selected: '',\n      contractList: [],\n      mapping: {},\n      analyses: {},\n      reports: {}\n    });\n  }\n\n  selectContract(contract) {\n    this.setState({ selected: contract });\n  }\n\n  addAlert(type, text) {\n    this.setState({\n      alerts: [...this.state.alerts, {\n        id: (new Date()).getTime(),\n        type: type,\n        message: text\n      }]\n    });\n  }\n\n  dismissAlert(alert) {\n    const { alerts } = this.state;\n    const idx = alerts.indexOf(alert);\n\n    if (idx >= 0) {\n      this.setState({\n        alerts: [...alerts.slice(0, idx), ...alerts.slice(idx + 1)]\n      });\n    }\n  }\n\n  render() {\n    const { pluginOpen, alerts } = this.state;\n\n    const content = pluginOpen ?\n      <div style={{ position: 'relative', minHeight: '100vh' }}>\n        <main>\n          <Plugin {...this.state}\n            saveCredentials={this.saveCredentials}\n            selectContract={this.selectContract}\n            analyze={this.analyze}\n            addAlert={this.addAlert}\n            highlightIssue={this.highlightIssue}\n            clear={this.clear}\n            changeTab={(tab) => { this.setState({ pluginActiveTab: tab }) }} />\n        </main>\n        <Footer isPlugin />\n        <Notifier alerts={alerts} onDismiss={this.dismissAlert} />\n      </div> :\n      <Home />;\n\n    return (\n      <>\n        {content}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { AlertList } from 'react-bs-notifier';\n\nfunction Notifier({ alerts, onDismiss }) {\n  return (\n    <AlertList\n      position='bottom-right'\n      alerts={alerts}\n      timeout={3000}\n      onDismiss={onDismiss}\n      showIcon={false}\n    />\n  );\n}\n\nNotifier.propTypes = {\n  alerts: PropTypes.array.isRequired,\n  onDismiss: PropTypes.func.isRequired\n};\n\nexport default Notifier;","import React from 'react';\n\nimport Footer from './Footer';\nimport remixLogo from './../images/remix.svg';\nimport mythxLogo from './../images/mythx.png';\nimport plus from './../images/plus.svg';\n\nfunction Home() {\n  return (\n    <>\n      <div className='h-100'\n        style={{ background: '#012A3E' }}>\n        <div className='d-flex align-items-end flex-column' style={{ height: '50%' }}>\n          <div className='mt-auto pb-5 w-100'>\n            <h1 className='display-1 text-white'\n              style={{ textAlign: 'center' }}>re:MythX</h1>\n          </div>\n        </div>\n        <div className='d-flex justify-content-center pt-4'>\n          <a href='https://remix.ethereum.org' target='_blank' rel='noopener noreferrer'>\n            <img src={remixLogo} alt='remix' style={{ height: 120, width: 120, verticalAlign: 'top' }} />\n          </a>\n          <img src={plus} alt='plus' className='pl-5 pr-5' style={{ height: 100, width: 140 }} />\n          <a href='https://mythx.io/' target='_blank' rel='noopener noreferrer'>\n            <img src={mythxLogo} alt='mythx' style={{ height: 130, width: 180, verticalAlign: 'top' }} />\n          </a>\n        </div>\n      </div>\n      <Footer />\n    </>\n  );\n}\n\nexport default Home","module.exports = __webpack_public_path__ + \"static/media/remix.0cc3e824.svg\";","module.exports = __webpack_public_path__ + \"static/media/mythx.5fc6cc7c.png\";","module.exports = __webpack_public_path__ + \"static/media/plus.bd770134.svg\";","import SourceMappingDecoder from 'remix-lib/src/sourceMappingDecoder';\n\nimport { isFatal, getUniqueIssues } from './eslint';\n\nconst mythx2Severity = {\n  High: 2,\n  Medium: 1,\n};\n\nconst decoder = new SourceMappingDecoder();\n\n/**\n * Turn a srcmap entry (the thing between semicolons) into a line and\n * column location.\n * We make use of this.sourceMappingDecoder of this class to make\n * the conversion.\n *\n * @param {string} srcEntry - a single entry of solc sourceMap\n * @param {Array} lineBreakPositions - array returned by the function 'mapLineBreakPositions'\n * @returns {line: number, column: number}\n */\nconst textSrcEntry2lineColumn = (srcEntry, lineBreakPositions) => {\n  const ary = srcEntry.split(':');\n  const sourceLocation = {\n    length: parseInt(ary[1], 10),\n    start: parseInt(ary[0], 10),\n  };\n  const loc = decoder.convertOffsetToLineColumn(sourceLocation, lineBreakPositions);\n  return [loc.start, loc.end];\n};\n\n/**\n * Convert a MythX issue into an ESLint-style issue.\n * The eslint report format which we use, has these fields:\n *\n * - column,\n * - endCol,\n * - endLine,\n * - fatal,\n * - line,\n * - message,\n * - description,\n * - ruleId,\n * - ruleLink,\n * - severity\n *\n * but a MythX JSON report has these fields:\n *\n * - description.head\n * - description.tail\n * - locations\n * - severity\n * - swcId\n * - swcTitle\n *\n * @param {object} issue - the MythX issue we want to convert\n * @param {string} source - holds the contract code\n * @returns eslint-issue object\n */\nconst issue2EsLint = (issue, source, locations) => {\n  let swcLink;\n\n  if (!issue.swcID) {\n    swcLink = 'N/A';\n  } else {\n    swcLink = 'https://swcregistry.io/docs/' + issue.swcID;\n  }\n\n  const esIssue = {\n    fatal: false,\n    ruleId: issue.swcID,\n    ruleLink: swcLink,\n    message: `${issue.description.head}`,\n    description: `${issue.description.tail}`,\n    severity: mythx2Severity[issue.severity] || 1,\n    line: -1,\n    column: 0,\n    endLine: -1,\n    endCol: 0,\n    sourceType: '',\n    origin: issue\n  };\n\n  if (source) {\n    let startLineCol, endLineCol;\n    const lineBreakPositions = decoder.getLinebreakPositions(source);\n\n    if (locations.length) {\n      const srcEntry = locations[0].sourceMap.split(';')[0];\n      [startLineCol, endLineCol] = textSrcEntry2lineColumn(srcEntry, lineBreakPositions);\n      esIssue.sourceType = locations[0].sourceType;\n    }\n\n    if (startLineCol) {\n      esIssue.line = startLineCol.line;\n      esIssue.column = startLineCol.column;\n      esIssue.endLine = endLineCol.line;\n      esIssue.endCol = endLineCol.column;\n    }\n  }\n\n  return esIssue;\n};\n\n/**\n * Gets the source index from the issue sourcemap\n * \n * @param {object[]} locations - array of text-only MythX API issue locations\n * @returns {number}\n */\nconst getSourceIndex = locations => {\n  if (locations.length) {\n    const sourceMapRegex = /(\\d+):(\\d+):(\\d+)/g;\n    const match = sourceMapRegex.exec(locations[0].sourceMap);\n    // Ignore `-1` source index for compiler generated code\n    return match ? match[3] : 0;\n  }\n\n  return 0;\n};\n\n\n/**\n * Converts MythX analyze API output item to Eslint compatible object\n * @param {object} report - issue item from the collection MythX analyze API output\n * @param {object} data - Contains array of solidity contracts source code and the input filepath of contract\n * @returns {object}\n */\nconst convertMythXReport2EsIssue = (report, mapping, data) => {\n  const { issues } = report;\n  const { sources, functionHashes } = data;\n  const results = {};\n\n  const textLocationFilterFn = location => (\n    (location.sourceType === 'solidity-file')\n    &&\n    (location.sourceFormat === 'text')\n  );\n\n  // eslint-disable-next-line array-callback-return\n  issues.map(issue => {\n    const locations = issue.locations.filter(textLocationFilterFn);\n    const location = locations.length ? locations[0] : undefined;\n\n    let sourceCode = '';\n    let filePath = '<unknown>';\n\n    if (location) {\n      const sourceList = location.sourceList || report.sourceList || [];\n      const sourceIndex = getSourceIndex(location);\n      const fileName = sourceList[sourceIndex];\n\n      if (fileName) {\n        filePath = mapping[fileName] || fileName;\n\n        if (sources[filePath]) {\n          sourceCode = sources[filePath].content;\n        }\n      }\n    }\n\n    if (!results[filePath]) {\n      results[filePath] = {\n        errorCount: 0,\n        warningCount: 0,\n        fixableErrorCount: 0,\n        fixableWarningCount: 0,\n        filePath,\n        functionHashes,\n        sourceCode,\n        messages: [],\n      };\n    }\n\n    let message = issue2EsLint(issue, (sources[filePath] || {}).content, locations);\n    results[filePath].messages.push(message);\n  });\n\n  // eslint-disable-next-line no-unused-vars\n  for (let k in results) {\n    if (results.hasOwnProperty(k)) {\n      results[k].warningCount = results[k].messages.reduce((acc, { fatal, severity }) =>\n        !isFatal(fatal, severity) ? acc + 1 : acc, 0);\n\n      results[k].errorCount = results[k].messages.reduce((acc, { fatal, severity }) =>\n        isFatal(fatal, severity) ? acc + 1 : acc, 0);\n    }\n  }\n\n  return Object.values(results);\n};\n\nexport const formatIssues = (data, mapping, issues) => {\n  const results = {};\n  issues.forEach(report => {\n    convertMythXReport2EsIssue(report, mapping, data)\n      .forEach(issue => {\n        const result = results[issue.filePath];\n        if (!result) {\n          results[issue.filePath] = issue;\n          return;\n        }\n\n        results[issue.filePath] = {\n          errorCount: result.errorCount + issue.errorCount,\n          warningCount: result.warningCount + issue.warningCount,\n          fixableErrorCount: result.fixableErrorCount + issue.fixableErrorCount,\n          fixableWarningCount: result.fixableWarningCount + issue.fixableWarningCount,\n          filePath: result.filePath,\n          messages: [...result.messages, ...issue.messages],\n        };\n      });\n  });\n\n  const eslintIssues = Object.values(results)\n    .reduce((acc, curr) => acc.concat(curr), []);\n  return getUniqueIssues(eslintIssues);\n};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst KnownAddressMap = {\n  '0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe': 'Creator',\n  '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef': 'Attacker'\n}\n\nfunction IssueSteps({ issue }) {\n  const { extra = {} } = issue;\n  const { testCases = [] } = extra;\n\n  if (!testCases.length) {\n    return null;\n  }\n\n  return (\n    <div className='pt-1' style={{ fontSize: 14 }}>\n      <h6 className='bg-light p-1'>Steps to reproduce</h6>\n      {\n        testCases.map((tc, i) => {\n          return (\n            <div key={i} className=''>\n              {tc.steps.map((s, j) => {\n                const knownAddress = KnownAddressMap[s.origin];\n                return (\n                  <div key={j} className='pt-2'>\n                    <h6 className='font-weight-bold'>{`Transaction ${j + 1} ${j === 0 ? '(contract creation)' : ''}`}</h6>\n                    <div className='pl-3 text-truncate'>\n                      <div>\n                        <b>Sender:</b> {s.origin} {knownAddress ? `(${knownAddress})` : ''}\n                      </div>\n                      <div>\n                        <b>Value:</b> {s.value}\n                      </div>\n                      <div>\n                        <b>Function name:</b> {s.name || 'N/A'}\n                      </div>\n                      <div>\n                        <b>Calldata:</b> {s.input}\n                      </div>\n                      <div>\n                        <b>Decoded calldata:</b> {s.decodedInput || 'N/A'}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n              <hr />\n            </div>\n          )\n        })\n      }\n    </div>\n  );\n}\n\nIssueSteps.propTypes = {\n  issue: PropTypes.object.isRequired\n};\n\nexport default IssueSteps;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Collapse } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCode, faAngleRight, faAngleDown } from '@fortawesome/free-solid-svg-icons';\n\nimport IssueSteps from './IssueSteps';\nimport { isFatal } from './../lib/eslint';\n\nfunction Issue({ issue, highlightIssue }) {\n  const [isOpen, setIsOpen] = useState(false);\n  const toggle = () => setIsOpen(!isOpen);\n  return (\n    <>\n      <div>\n        {\n          issue.error ?\n            <div className='alert alert-danger p-1'>\n              {issue.error}\n            </div> :\n            <>\n              <div className='d-flex flex-row'>\n                <button onClick={toggle} className='btn btn-link align-self-center pl-0 pr-2'>\n                  <FontAwesomeIcon icon={isOpen ? faAngleDown : faAngleRight} />\n                </button>\n                <button type='button'\n                  className={`btn ${isFatal(issue.fatal, issue.severity) ? 'btn-danger' : 'btn-warning'} text-left p-1 mb-1 w-100`}\n                  onClick={() => { highlightIssue(issue); }}>\n                  {issue.sourceType === 'raw-bytecode' &&\n                    <span title='raw-bytecode'>\n                      <FontAwesomeIcon className='float-right' style={{ fontSize: 10 }} icon={faCode} />\n                    </span>\n                  }\n                  <span className='pr-2'>{`[${issue.line + 1}:${issue.column}]`}</span>\n                  {issue.message}\n                </button>\n              </div>\n              <Collapse isOpen={isOpen}>\n                <div className='pl-3 pb-3'>\n                  <div style={{ fontSize: 13 }}>\n                    {issue.description}\n                    {issue.ruleId && <a href={issue.ruleLink} className='pl-1' target='_blank' rel='noopener noreferrer'>[{issue.ruleId}]</a>}\n                  </div>\n                  <IssueSteps issue={issue.origin} />\n                </div>\n              </Collapse>\n            </>\n        }\n      </div>\n    </>\n  );\n}\n\nIssue.propTypes = {\n  issue: PropTypes.object.isRequired,\n  highlightIssue: PropTypes.func.isRequired\n};\n\nexport default Issue;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Issue from './Issue';\n\nfunction Report({ report, highlightIssue }) {\n  return (\n    <>\n      {\n        report.message &&\n        <div className='row'>\n          <div className='col-md-6 offset-md-3'>\n            <div className='alert alert-success w-100' role='alert'>\n              {report.message}\n            </div>\n          </div>\n        </div>\n      }\n      {\n        report.list &&\n        <div className='row'>\n          <div className='col-md-6 offset-md-3'>\n            {\n              report.list.map((x, i) => {\n                const issueCount = x.errorCount + x.warningCount;\n                const summary = (amount, caption) => {\n                  return `${amount} ${amount === 1 ? caption : `${caption}s`}`;\n                };\n                return (\n                  <div key={i} className='border-bottom pt-2 pb-2'>\n                    <div className='text-truncate font-weight-bold'>{x.filePath}</div>\n                    {\n                      x.messages.map((m, j) => <Issue key={j} issue={m} highlightIssue={(issue) => highlightIssue(x, issue)} />)\n                    }\n                    {\n                      !!issueCount &&\n                      <div>\n                        {`✖ ${summary(issueCount, 'issue')} (${summary(x.errorCount, 'error')}, ${summary(x.warningCount, 'warning')})`}\n                      </div>\n                    }\n                  </div>\n                );\n              })\n            }\n          </div>\n        </div>\n      }\n    </>\n  );\n}\n\nReport.propTypes = {\n  report: PropTypes.object.isRequired,\n  highlightIssue: PropTypes.func.isRequired\n};\n\nexport default Report;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faClock } from '@fortawesome/free-solid-svg-icons';\n\nfunction Log({ list = [] }) {\n  return (\n    <div className='row'>\n      {\n        list.slice(0, 5)\n          .map((x, i) => {\n            const link = `https://dashboard.mythx.io/#/console/analyses/${x.uuid}`;\n            return (\n              <div key={i} className='col-md-6 offset-md-3 pt-1 pb-1'>\n                <span className='pr-2 text-secondary'>[{moment(x.timestamp).format('L LTS')}]</span>\n                {x.mode === 'full' ? <FontAwesomeIcon icon={faClock} className='mr-2' /> : null}\n                Your <b>{x.mode}</b> analysis has been submitted! Please see your results at\n                <a href={link} className='pl-1' target='_blank' rel='noopener noreferrer'>{x.uuid}</a>\n              </div>\n            );\n          })\n      }\n    </div>\n  );\n}\n\nLog.propTypes = {\n  list: PropTypes.array.isRequired,\n};\n\nexport default Log;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons';\n\nfunction InfoIcon({ children, placement, ...props }) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <FontAwesomeIcon className='ml-2' icon={faInfoCircle} {...props} />\n      <Tooltip placement={placement}\n        isOpen={isOpen}\n        autohide={false}\n        target={props.id}\n        toggle={() => { setIsOpen(!isOpen); }}>\n        {children}\n      </Tooltip>\n    </>\n  );\n}\n\nInfoIcon.propTypes = {\n  id: PropTypes.string.isRequired,\n  children: PropTypes.node\n};\n\nexport default InfoIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faAngleRight,\n  faAngleDown,\n  faClipboard,\n  faTrash\n} from '@fortawesome/free-solid-svg-icons';\nimport { Nav, NavItem, NavLink, TabContent, TabPane } from 'reactstrap';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nimport Report from './Report';\nimport Log from './Log';\nimport InfoIcon from './InfoIcon';\n\nconst separator = '::';\n\nclass Plugin extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      address: props.address,\n      pwd: props.pwd,\n      creadOpen: props.address === '0x0000000000000000000000000000000000000000'\n    };\n\n    this.saveCredentials = this.saveCredentials.bind(this);\n  }\n\n  saveCredentials() {\n    const { address, pwd } = this.state;\n    this.props.saveCredentials(address, pwd);\n  }\n\n  render() {\n    const { address, pwd, creadOpen } = this.state;\n    const {\n      contractList,\n      selected,\n      isAnalyzig,\n      analyses,\n      reports,\n      selectContract,\n      pluginActiveTab,\n      analyze,\n      addAlert,\n      highlightIssue,\n      clear,\n      changeTab\n    } = this.props;\n    const [target] = selected.split(separator);\n\n    return (\n      <div className='container'>\n        <div className='row border-bottom pb-3'>\n          <div className='col-md-6 offset-md-3'>\n            <div className='btn btn-light btn-block text-left rounded-0 border-0'\n              style={{ cursor: 'pointer' }}\n              onClick={() => { this.setState({ creadOpen: !creadOpen }) }}>\n              Credentials\n              <div style={{ position: 'absolute', right: 24, top: 4 }}>\n                {creadOpen ? <span style={{ fontSize: 14, lineHeight: '16px', paddingRight: 6 }}>hide</span> : null}\n                <FontAwesomeIcon icon={creadOpen ? faAngleDown : faAngleRight} className='pt-1' />\n              </div>\n              <InfoIcon id='cred_info' placement='right'>\n                <div>In order to use MythX</div>\n                <div>APIs you need to have</div>\n                <div>credentials. You can use</div>\n                <div>the trial credential, but</div>\n                <div>analysis's result will be</div>\n                <div>limited. In order to get</div>\n                <div>credential you need to</div>\n                <div><a href='https://mythx.io/' target='_blank' rel='noopener noreferrer' className='text-nowrap'>sign up</a></div>\n              </InfoIcon>\n            </div>\n            <div className={creadOpen ? null : 'collapse'}>\n              <form>\n                <div className='form-group'>\n                  <label htmlFor='address'>Address</label>\n                  <input\n                    type='text'\n                    className='form-control'\n                    id='address'\n                    aria-describedby='emailHelp'\n                    placeholder='Address'\n                    onChange={(e) => this.setState({ address: e.target.value })}\n                    defaultValue={address} />\n                </div>\n                <div className='form-group'>\n                  <label htmlFor='pwd'>Password</label>\n                  <input\n                    type='password'\n                    className='form-control'\n                    id='pwd'\n                    placeholder='Password'\n                    onChange={(e) => this.setState({ pwd: e.target.value })}\n                    defaultValue={pwd} />\n                </div>\n                <button\n                  type='button'\n                  className='btn btn-primary'\n                  onClick={this.saveCredentials}>\n                  Save\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n        <div className='row mt-3'>\n          <div className='col-md-6 offset-md-3'>\n            {\n              target ?\n                <>\n                  <div className='d-flex pb-3'>\n                    <div className='w-100'>\n                      <select\n                        className='form-control'\n                        value={selected}\n                        onChange={(e) => selectContract(e.target.value)}\n                        disabled={isAnalyzig}\n                      >\n                        {contractList.map((x, i) =>\n                          <option key={i} value={x}>{x}</option>\n                        )}\n                      </select>\n                    </div>\n                    <div className='flex-shrink-1'>\n                      <button\n                        type='button'\n                        className='form-control btn ml-2'\n                        title='Clear'\n                        onClick={clear}\n                        disabled={isAnalyzig}>\n                        <FontAwesomeIcon icon={faTrash} />\n                      </button>\n                    </div>\n                  </div>\n                  <div>\n                    <button\n                      type='button'\n                      className='btn btn-primary'\n                      onClick={() => analyze()}\n                      disabled={isAnalyzig}>\n                      {\n                        isAnalyzig ?\n                          <span className='spinner-border spinner-border-sm' role='status' aria-hidden='true'></span> :\n                          <div>\n                            Analyze\n                            <InfoIcon id='analysis_info' placement='right'>\n                              <div>Analysis can take couple</div>\n                              <div>of minutes</div>\n                            </InfoIcon>\n                          </div>\n                      }\n                    </button>\n                    <button\n                      type='button'\n                      className='btn btn-primary ml-2'\n                      onClick={() => analyze('full')}\n                      disabled={isAnalyzig}>\n                      Run full mode\n                    </button>\n                    {\n                      isAnalyzig &&\n                      <div style={{ fontSize: 14, fontWeight: 'bold' }}>\n                        We are analyzing your contract. This should take up to 2 minutes\n                      </div>\n                    }\n                  </div>\n                </> :\n                <div className='alert alert-warning w-100' role='alert'>\n                  You need to compile your contract first!\n                </div>\n            }\n          </div>\n        </div>\n        <Nav tabs className='pt-1'>\n          <NavItem>\n            <NavLink\n              href='#'\n              className={pluginActiveTab === 'log' ? 'active' : null}\n              onClick={() => changeTab('log')}\n            >\n              Log\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              href='#'\n              className={pluginActiveTab === 'report' ? 'active' : null}\n              onClick={() => changeTab('report')}\n            >\n              Report\n            </NavLink>\n          </NavItem>\n        </Nav>\n        <TabContent activeTab={pluginActiveTab}>\n          <TabPane tabId='log'>\n            <Log list={this.props.log} />\n          </TabPane>\n          <TabPane tabId='report'>\n            {\n              analyses[selected] &&\n              <div className='text-right'>\n                <CopyToClipboard\n                  text={JSON.stringify(analyses[selected])}\n                  onCopy={() => addAlert('success', 'Copied')}>\n                  <button type='button' className='btn' title='Copy raw report to clipboard'>\n                    <FontAwesomeIcon className='ml-2' icon={faClipboard} /><span className='pl-1'>Raw report</span>\n                  </button>\n                </CopyToClipboard>\n              </div>\n            }\n            <Report report={reports[selected] || {}} highlightIssue={highlightIssue} />\n          </TabPane>\n        </TabContent>\n      </div>\n    );\n  }\n}\n\nPlugin.propTypes = {\n  addAlert: PropTypes.func.isRequired,\n  contractList: PropTypes.array.isRequired,\n  selected: PropTypes.string.isRequired,\n  isAnalyzig: PropTypes.bool.isRequired,\n  analyses: PropTypes.object.isRequired,\n  reports: PropTypes.object.isRequired,\n  saveCredentials: PropTypes.func.isRequired,\n  selectContract: PropTypes.func.isRequired,\n  highlightIssue: PropTypes.func.isRequired,\n  clear: PropTypes.func.isRequired,\n  changeTab: PropTypes.func.isRequired,\n};\n\nexport default Plugin;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const isFatal = (fatal, severity) => fatal || severity === 2;\n\nconst getUniqueMessages = messages => {\n  const jsonValues = messages.map(m => JSON.stringify(m));\n  const uniuqeValues = jsonValues.reduce((accum, curr) => {\n    if (accum.indexOf(curr) === -1) {\n      accum.push(curr);\n    }\n    return accum;\n  }, []);\n\n  return uniuqeValues.map(v => JSON.parse(v));\n};\n\nconst calculateErrors = messages =>\n  messages.reduce((acc, { fatal, severity }) => isFatal(fatal, severity) ? acc + 1 : acc, 0);\n\nconst calculateWarnings = messages =>\n  messages.reduce((acc, { fatal, severity }) => !isFatal(fatal, severity) ? acc + 1 : acc, 0);\n\n\nexport const getUniqueIssues = issues =>\n  issues.map(({ messages, ...restProps }) => {\n    const uniqueMessages = getUniqueMessages(messages);\n    const warningCount = calculateWarnings(uniqueMessages);\n    const errorCount = calculateErrors(uniqueMessages);\n\n    return {\n      ...restProps,\n      messages: uniqueMessages,\n      errorCount,\n      warningCount,\n    };\n  });","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport packageJson from './../../package.json';\n\nfunction Footer({ isPlugin }) {\n  return (\n    <div className={`position-absolute text-center w-100 pb-1${isPlugin ? '' : ' text-white'}`} style={{ fontSize: 12, bottom: 0 }}>\n      <a href={`https://github.com/aquiladev/remix-mythx-plugin/releases/tag/${packageJson.version}`} target='_block' rel='noopener noreferrer'>\n        {packageJson.version}\n      </a> | <a href='https://discord.gg/VhdtjCh' target='_blank' rel='noopener noreferrer'>Get support</a>\n    </div>\n  );\n}\n\nFooter.propTypes = {\n  isPlugin: PropTypes.bool\n};\n\nexport default Footer;","const removeRelativePathFromUrl = url => url.replace(/^.+\\.\\//, '').replace('./', '');\n\n/* Dynamic linking is not supported. */\n\nconst regex = new RegExp(/__\\$\\w+\\$__/,'g');\nconst address = '0000000000000000000000000000000000000000';\nconst replaceLinkedLibs = byteCode => byteCode.replace(regex, address);\n\nmodule.exports = {\n    removeRelativePathFromUrl,\n    replaceLinkedLibs\n};"],"sourceRoot":""}