{"version":3,"sources":["lib/utils.js","App.js","components/Settings.js","components/Notifier.js","components/Home.js","images/remix.svg","images/mythx.png","images/plus.svg","lib/report.js","components/IssueSteps.js","components/Issue.js","components/Report.js","components/Log.js","components/InfoIcon.js","components/Plugin.js","lib/eslint.js","serviceWorker.js","index.js","components/Footer.js"],"names":["regex","RegExp","module","exports","removeRelativePathFromUrl","url","replace","replaceLinkedLibs","byteCode","storageKey","TRIAL_CREDS","client","App","props","analyze","a","mode","state","compilations","selected","analyses","reports","split","target","emit","key","type","title","mythx","createClient","login","accessToken","setState","list","messages","isAnalyzing","jwt","call","options","getRequestData","analysis","logAnalysis","uuid","getDetectedIssues","issues","pluginActiveTab","handleResult","source","error","message","highlightIssue","issue","line","position","start","column","end","endLine","endCol","color","severity","filePath","initState","createIframeClient","onload","pluginOpen","then","result","data","processCompilation","on","_","bind","saveSettings","clear","selectContract","addAlert","dismissAlert","openSettings","closeSettings","raw","localStorage","getItem","appState","JSON","parse","settingsOpen","address","pwd","token","env","contractList","mapping","alerts","log","visibleTrialWarning","this","contracts","file","fileMapping","Object","keys","forEach","x","bytecode","evm","deployedBytecode","object","hash","keccak","update","Buffer","from","digest","contractSet","Set","getContracts","Array","map","newState","setItem","stringify","timestamp","Date","getTime","environment","slice","substr","length","Client","err","console","jwtTokens","access","contract","sources","request","contractName","utils","sourceMap","deployedSourceMap","analysisMode","mainSource","sourceList","prototype","hasOwnProperty","ast","src","content","uniqueIssues","formatIssues","text","id","alert","idx","indexOf","style","minHeight","save","close","className","isOpen","toggle","padding","display","onClick","changeTab","tab","isPlugin","onDismiss","href","rel","React","Component","Settings","inAddress","inPwd","inEnv","inToken","useState","activeTab","isAdv","class","checked","e","for","icon","faTimes","size","cursor","fontSize","tabs","marginTop","classnames","active","border","borderTop","tabId","htmlFor","placeholder","onChange","value","defaultValue","Notifier","timeout","showIcon","Home","background","height","textAlign","remixLogo","alt","width","verticalAlign","plus","mythxLogo","mythx2Severity","High","Medium","decoder","SourceMappingDecoder","issue2EsLint","locations","swcLink","swcID","esIssue","fatal","ruleId","ruleLink","description","head","tail","sourceType","origin","startLineCol","endLineCol","lineBreakPositions","getLinebreakPositions","srcEntry","ary","sourceLocation","parseInt","loc","convertOffsetToLineColumn","textSrcEntry2lineColumn","results","report","functionHashes","textLocationFilterFn","location","sourceFormat","k","filter","undefined","sourceCode","fileName","match","exec","getSourceIndex","errorCount","warningCount","fixableErrorCount","fixableWarningCount","push","reduce","acc","isFatal","values","convertMythXReport2EsIssue","eslintIssues","curr","concat","getUniqueIssues","KnownAddressMap","IssueSteps","extra","testCases","tc","i","steps","s","j","knownAddress","name","input","decodedInput","Issue","setIsOpen","faAngleDown","faAngleRight","faCode","Collapse","Report","role","issueCount","summary","amount","caption","m","Log","link","moment","format","faClock","InfoIcon","children","placement","faInfoCircle","Tooltip","autohide","Plugin","isAnalyzeDropdownOpen","setIsAnalyzeDropdownOpen","isAnalyzeAllowed","isAnalyzeDisabled","disabled","faTrash","Alert","ButtonGroup","ButtonDropdown","aria-hidden","DropdownToggle","caret","DropdownMenu","DropdownItem","fontWeight","Nav","NavItem","NavLink","TabContent","TabPane","onCopy","faClipboard","restProps","uniqueMessages","accum","v","getUniqueMessages","calculateWarnings","calculateErrors","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","Footer","links","packageJson","version","bottom","faCog","right"],"mappings":"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","file":"static/js/main.ddbc931b.chunk.js","sourcesContent":["const removeRelativePathFromUrl = url => url.replace(/^.+\\.\\//, '').replace('./', '')\n\n/* Dynamic linking is not supported. */\n\nconst regex = new RegExp(/__\\$\\w+\\$__/, 'g')\nconst address = '0000000000000000000000000000000000000000'\nconst replaceLinkedLibs = byteCode => byteCode.replace(regex, address)\n\nmodule.exports = {\n  removeRelativePathFromUrl,\n  replaceLinkedLibs\n}\n","import React from 'react'\nimport { createIframeClient } from '@remixproject/plugin'\nimport { Client } from 'mythxjs'\nimport keccak from 'keccakjs'\nimport { Alert } from 'reactstrap'\n\nimport Plugin from './components/Plugin'\nimport Settings from './components/Settings'\nimport Footer from './components/Footer'\nimport Notifier from './components/Notifier'\nimport Home from './components/Home'\nimport { formatIssues } from './lib/report'\nimport utils from './lib/utils'\n\nconst separator = ' - '\nconst storageKey = 'remix-mythx-plugin'\nconst TOOL_NAME = 'remythx'\nconst DEFAULT_ENV = 'https://api.mythx.io/v1/'\nconst TRIAL_CREDS = {\n  address: '0x0000000000000000000000000000000000000000',\n  pwd: 'trial'\n}\n\nlet client = {}\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n\n    try {\n      this.state = this.initState()\n    } catch (error) {\n      this.state = {\n        error\n      }\n    }\n\n    client = createIframeClient()\n    client.onload(() => {\n      this.setState({ pluginOpen: true })\n      client.call('solidity', 'getCompilationResult')\n        .then((result) => {\n          if (!result) {\n            return\n          }\n\n          const { data, source } = result\n\n          if (!source) {\n            return\n          }\n\n          this.processCompilation(source.target, source, data)\n        })\n\n      client.on('solidity', 'compilationFinished', (target, source, _, data) => {\n        this.processCompilation(target, source, data)\n      })\n    })\n\n    this.processCompilation = this.processCompilation.bind(this)\n    this.login = this.login.bind(this)\n    this.saveSettings = this.saveSettings.bind(this)\n    this.logAnalysis = this.logAnalysis.bind(this)\n    this.analyze = this.analyze.bind(this)\n    this.getRequestData = this.getRequestData.bind(this)\n    this.handleResult = this.handleResult.bind(this)\n    this.highlightIssue = this.highlightIssue.bind(this)\n    this.clear = this.clear.bind(this)\n    this.selectContract = this.selectContract.bind(this)\n    this.addAlert = this.addAlert.bind(this)\n    this.dismissAlert = this.dismissAlert.bind(this)\n    this.openSettings = this.openSettings.bind(this)\n    this.closeSettings = this.closeSettings.bind(this)\n  }\n\n  initState () {\n    const raw = localStorage.getItem(storageKey) || '{}'\n    const appState = JSON.parse(raw)\n\n    return {\n      pluginOpen: false,\n      settingsOpen: false,\n      address: appState.address || TRIAL_CREDS.address,\n      pwd: appState.pwd || TRIAL_CREDS.pwd,\n      token: appState.token,\n      env: appState.env || DEFAULT_ENV,\n      jwt: null,\n      compilations: {},\n      selected: '',\n      contractList: [],\n      mapping: {},\n      isAnalyzing: false,\n      analyses: {},\n      reports: {},\n      alerts: [],\n      log: appState.log || [],\n      pluginActiveTab: 'log',\n      visibleTrialWarning: true\n    }\n  }\n\n  processCompilation (target, source, data) {\n    const { compilations, contractList, mapping } = this.state\n\n    const { contracts = [] } = data\n    const file = contracts[target]\n    const fileMapping = {}\n\n    Object.keys(file).forEach(x => {\n      const bytecode = file[x].evm.deployedBytecode.object\n      // eslint-disable-next-line\n      const hash = new keccak(256)\n      hash.update(Buffer.from(bytecode, 'hex'))\n\n      fileMapping[target] = target\n      fileMapping[`0x${hash.digest('hex')}`] = target\n    })\n\n    const list = Object.keys(data.contracts[target])\n    const contractSet = new Set([...contractList, ...this.getContracts(data, target)])\n    this.setState({\n      compilations: { ...compilations, [target]: { source, data } },\n      selected: `${list[0]}${separator}${target}`,\n      contractList: Array.from(contractSet),\n      mapping: { ...mapping, ...fileMapping }\n    })\n\n    client.emit('statusChanged', { key: 'none' })\n  }\n\n  getContracts (data, target) {\n    const { contracts = [] } = data\n    var file = contracts[target] || {}\n    return Object.keys(file).map(x => `${x}${separator}${target}`)\n  }\n\n  saveSettings (address, pwd, token, env) {\n    address = address || TRIAL_CREDS.address\n    pwd = pwd || TRIAL_CREDS.pwd\n    env = env || DEFAULT_ENV\n\n    this.setState({ address, pwd, token, env, jwt: null })\n    const raw = localStorage.getItem(storageKey) || '{}'\n    const state = JSON.parse(raw)\n    const newState = {\n      ...state,\n      ...{ address, pwd, token, env }\n    }\n    localStorage.setItem(storageKey, JSON.stringify(newState))\n    this.addAlert('success', 'Saved')\n  }\n\n  logAnalysis (uuid, mode) {\n    const raw = localStorage.getItem(storageKey) || '{}'\n    const state = JSON.parse(raw)\n    const newState = {\n      ...state,\n      ...{\n        log: [\n          { timestamp: new Date().getTime(), uuid, mode },\n          ...(state.log || [])\n        ]\n      }\n    }\n    localStorage.setItem(storageKey, JSON.stringify(newState))\n    this.setState({ log: newState.log })\n  }\n\n  analyze = async (mode = 'quick') => {\n    const { compilations, selected, analyses, reports } = this.state\n    const [, target] = selected.split(separator)\n\n    client.emit('statusChanged', { key: 'loading', type: 'info', title: 'Analyzing...' })\n\n    try {\n      const mythx = this.createClient()\n      const accessToken = await this.login(mythx)\n\n      this.setState({\n        analyses: { ...analyses, [selected]: null },\n        reports: {\n          ...reports,\n          [selected]: {\n            list: [{\n              messages: []\n            }]\n          }\n        },\n        isAnalyzing: true,\n        jwt: accessToken\n      })\n      await client.call('editor', 'discardHighlight')\n\n      const options = this.getRequestData(mode)\n      const analysis = await mythx.analyze(options)\n      this.logAnalysis(analysis.uuid, mode)\n\n      if (mode === 'quick') {\n        const issues = await mythx.getDetectedIssues(analysis.uuid)\n\n        this.setState({\n          analyses: { ...analyses, [selected]: issues },\n          isAnalyzing: false,\n          pluginActiveTab: 'report'\n        })\n\n        this.handleResult(compilations[target].source, issues)\n      } else {\n        client.emit('statusChanged', { key: 'none' })\n        this.setState({\n          isAnalyzing: false,\n          pluginActiveTab: 'log'\n        })\n      }\n    } catch (err) {\n      client.emit('statusChanged', { key: 'failed', type: 'error', title: 'Failed' })\n      this.setState({\n        analyses: { ...analyses, [selected]: null },\n        reports: {\n          ...reports,\n          [selected]: {\n            list: [{\n              messages: [{\n                error: err.message || err\n              }]\n            }]\n          }\n        },\n        isAnalyzing: false,\n        pluginActiveTab: 'report'\n      })\n    }\n  }\n\n  createClient () {\n    const { address, pwd, token, jwt, env } = this.state\n\n    const environment = env.slice(-1) === '/' ? env.substr(0, env.length - 1) : env\n    try {\n      return new Client(address, pwd, TOOL_NAME, environment, token || jwt)\n    } catch (err) {\n      console.error(err)\n      return new Client(address, pwd, TOOL_NAME, environment)\n    }\n  }\n\n  async login (client) {\n    if (!Client.jwtTokens.access) {\n      await client.login()\n    }\n    return Client.jwtTokens.access\n  }\n\n  getRequestData (mode) {\n    const { compilations, selected } = this.state\n    const [contract, target] = selected.split(separator)\n    const { data = {}, source = {} } = compilations[target]\n    const { contracts = [], sources = {} } = data\n\n    const file = contracts[target]\n    const bytecode = file[contract].evm.bytecode\n    const deployedBytecode = file[contract].evm.deployedBytecode\n    const request = {\n      contractName: contract,\n      bytecode: utils.replaceLinkedLibs(bytecode.object),\n      sourceMap: bytecode.sourceMap,\n      deployedBytecode: utils.replaceLinkedLibs(deployedBytecode.object),\n      deployedSourceMap: deployedBytecode.sourceMap,\n      analysisMode: mode,\n      mainSource: target,\n      sourceList: Object.keys(source.sources),\n      sources: {}\n    }\n\n    for (const key in source.sources) {\n      if (Object.prototype.hasOwnProperty.call(source.sources, key)) {\n        const ast = sources[key].ast\n        const src = source.sources[key].content\n\n        request.sources[key] = { ast, source: src }\n      }\n    }\n\n    return request\n  }\n\n  handleResult (data, result) {\n    const { selected, reports, mapping } = this.state\n    const uniqueIssues = formatIssues(data, mapping, result)\n\n    if (uniqueIssues.length === 0) {\n      client.emit('statusChanged', { key: 'succeed', type: 'success', title: 'No errors/warnings found' })\n      this.setState({\n        reports: {\n          ...reports,\n          [selected]: {\n            message: `✔ No errors/warnings found in ${selected}`\n          }\n        }\n      })\n    } else {\n      client.emit('statusChanged', { key: 'failed', type: 'warning', title: 'Errors/warnings found' })\n      this.setState({\n        reports: {\n          ...reports,\n          [selected]: {\n            list: uniqueIssues\n          }\n        }\n      })\n    }\n  }\n\n  highlightIssue = async (issue, message) => {\n    if (message.line < 0) {\n      return\n    }\n\n    const position = {\n      start: { line: message.line, column: message.column },\n      end: { line: message.endLine, column: message.endCol }\n    }\n    const color = message.severity === 1 ? '#ffd300' : '#ff0000'\n    await client.call('editor', 'highlight', position, issue.filePath, color)\n  }\n\n  clear () {\n    client.emit('statusChanged', { key: 'none' })\n    this.setState({\n      compilations: {},\n      selected: '',\n      contractList: [],\n      mapping: {},\n      analyses: {},\n      reports: {}\n    })\n  }\n\n  selectContract (selected) {\n    if (this.state.selected === selected) {\n      return\n    }\n\n    client.emit('statusChanged', { key: 'none' })\n    this.setState({ selected })\n  }\n\n  addAlert (type, text) {\n    this.setState({\n      alerts: [...this.state.alerts, {\n        id: (new Date()).getTime(),\n        type: type,\n        message: text\n      }]\n    })\n  }\n\n  dismissAlert (alert) {\n    const { alerts } = this.state\n    const idx = alerts.indexOf(alert)\n\n    if (idx >= 0) {\n      this.setState({\n        alerts: [...alerts.slice(0, idx), ...alerts.slice(idx + 1)]\n      })\n    }\n  }\n\n  openSettings () {\n    this.setState({\n      settingsOpen: true\n    })\n  }\n\n  closeSettings () {\n    this.setState({\n      settingsOpen: false\n    })\n  }\n\n  render () {\n    const { pluginOpen, settingsOpen, address, token, visibleTrialWarning, alerts } = this.state\n\n    const content = pluginOpen\n      ? <div style={{ position: 'relative', minHeight: '100vh' }}>\n        <main>\n          {settingsOpen\n            ? <Settings {...this.state}\n              save={this.saveSettings}\n              close={this.closeSettings} />\n            : <>\n              {address === TRIAL_CREDS.address && !token &&\n                <div className='container'>\n                  <Alert color='warning' isOpen={visibleTrialWarning}\n                    toggle={() => { this.setState({ visibleTrialWarning: false }) }}\n                    style={{ padding: '.5rem 2.9rem .5rem .5rem' }}>\n                    You are now using trial credentials. Update in <button\n                      className='btn btn-link p-0'\n                      style={{ display: 'contents' }}\n                      onClick={this.openSettings}>Settings</button>\n                  </Alert>\n                </div>\n              }\n              <Plugin {...this.state}\n                selectContract={this.selectContract}\n                analyze={this.analyze}\n                addAlert={this.addAlert}\n                highlightIssue={this.highlightIssue}\n                clear={this.clear}\n                changeTab={(tab) => { this.setState({ pluginActiveTab: tab }) }} />\n            </>\n          }\n        </main>\n        <Footer isPlugin openSettings={this.openSettings} />\n        <Notifier alerts={alerts} onDismiss={this.dismissAlert} />\n      </div>\n      : <Home />\n\n    return (\n      <>\n        {\n          this.state.error\n            ? <div>Error on plugin startup:\n              <Alert color='danger'>{this.state.error.message}</Alert>\n              <p />\n              Take a look on <a href='https://github.com/aquiladev/remix-mythx-plugin#troubleshooting' target='_block' rel='noopener noreferrer'>troubleshooting</a>\n            </div>\n            : content\n        }\n      </>\n    )\n  }\n}\n\nexport default App\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Alert, TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap'\nimport classnames from 'classnames'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\n\nfunction Settings ({\n  address: inAddress,\n  pwd: inPwd,\n  env: inEnv,\n  token: inToken,\n  save: saveSettings,\n  close\n}) {\n  const [state, setState] = useState({\n    activeTab: '2',\n    address: inAddress,\n    pwd: inPwd,\n    token: inToken,\n    env: inEnv,\n    isAdv: false\n  })\n\n  const toggle = tab => {\n    if (state.activeTab !== tab) setState({ ...state, activeTab: tab })\n  }\n\n  const save = () => {\n    const { address, pwd, token, env } = state\n    saveSettings(address, pwd, token, env)\n  }\n\n  return (\n    <div className='container'>\n      <div className='row pb-3'>\n        <div className='col-12 text-right'>\n          <div class='custom-control custom-switch float-left'>\n            <input type='checkbox'\n              className='custom-control-input'\n              id='isAdv'\n              checked={state.isAdv}\n              onClick={(e) => { setState({ ...state, isAdv: e.target.checked }) }} />\n            <label className='custom-control-label' for='isAdv'>\n              { state.isAdv ? 'Advanced' : 'Basic' }\n            </label>\n          </div>\n          <FontAwesomeIcon\n            icon={faTimes}\n            size='lg'\n            className='float-right ml-2'\n            style={{ cursor: 'pointer' }}\n            onClick={close}\n          />\n        </div>\n      </div>\n      <div className='row pb-3'>\n        <div className='col-md-6 offset-md-3'>\n          <div className='text-left'>\n            <h5>Access</h5>\n            {state.address === '0x0000000000000000000000000000000000000000' && !state.token &&\n              <Alert color='warning' style={{ fontSize: 13, padding: '.5rem' }}>\n                You need to sign in to use MythX APIs.\n                Trial user will be soon deprecated.\n                Please register an account on <a href='https://mythx.io/' target='_blank' rel='noopener noreferrer' className='text-nowrap'>www.mythx.io</a>\n              </Alert>\n            }\n          </div>\n          <Nav tabs style={{ marginTop: '.5rem' }}>\n            <NavItem>\n              <NavLink\n                className={classnames({ active: state.activeTab === '2' })}\n                style={{ padding: '.5rem 1rem', cursor: 'pointer' }}\n                onClick={() => { toggle('2') }}\n              >\n                Access Token\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink\n                className={classnames({ active: state.activeTab === '1' })}\n                style={{ padding: '.5rem 1rem', cursor: 'pointer' }}\n                onClick={() => { toggle('1') }}\n              >\n                Credentials\n              </NavLink>\n            </NavItem>\n          </Nav>\n          <TabContent activeTab={state.activeTab}\n            style={{ padding: '.5rem .5rem 0 .5rem', border: '1px solid #ecf0f1', borderTop: 'none' }}>\n            <TabPane tabId='2'>\n              <div className='form-group'>\n                <label htmlFor='token'>JWT</label>\n                <input\n                  type='text'\n                  className='form-control'\n                  id='token'\n                  placeholder='Token'\n                  onChange={(e) => setState({ ...state, token: e.target.value })}\n                  defaultValue={state.token} />\n              </div>\n            </TabPane>\n            <TabPane tabId='1'>\n              <div className='form-group'>\n                <label htmlFor='address'>Address/Email</label>\n                <input\n                  type='text'\n                  className='form-control'\n                  id='address'\n                  placeholder='Address'\n                  onChange={(e) => setState({ ...state, address: e.target.value })}\n                  defaultValue={state.address} />\n              </div>\n              <div className='form-group'>\n                <label htmlFor='pwd'>Password</label>\n                <input\n                  type='password'\n                  className='form-control'\n                  id='pwd'\n                  placeholder='Password'\n                  onChange={(e) => setState({ ...state, pwd: e.target.value })}\n                  defaultValue={state.pwd} />\n              </div>\n            </TabPane>\n          </TabContent>\n        </div>\n      </div>\n      { state.isAdv &&\n        <div className='row pb-3'>\n          <div className='col-md-6 offset-md-3'>\n            <div className='text-left'>\n              <h5>Environment</h5>\n            </div>\n            <div>\n              <div className='form-group'>\n                <label htmlFor='address'>Endpoint</label>\n                <input\n                  type='text'\n                  className='form-control'\n                  id='endpoint'\n                  placeholder='Endpoint'\n                  onChange={(e) => setState({ ...state, env: e.target.value })}\n                  defaultValue={state.env} />\n              </div>\n            </div>\n          </div>\n        </div>\n      }\n      <div className='row pb-3'>\n        <div className='col-md-6 offset-md-3'>\n          <button\n            type='button'\n            className='btn btn-primary'\n            onClick={save}>\n            Save\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nSettings.propTypes = {\n  save: PropTypes.func.isRequired,\n  close: PropTypes.func.isRequired\n}\n\nexport default Settings\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { AlertList } from 'react-bs-notifier'\n\nfunction Notifier ({ alerts, onDismiss }) {\n  return (\n    <AlertList\n      position='bottom-right'\n      alerts={alerts}\n      timeout={3000}\n      onDismiss={onDismiss}\n      showIcon={false}\n    />\n  )\n}\n\nNotifier.propTypes = {\n  alerts: PropTypes.array.isRequired,\n  onDismiss: PropTypes.func.isRequired\n}\n\nexport default Notifier\n","import React from 'react'\n\nimport Footer from './Footer'\nimport remixLogo from './../images/remix.svg'\nimport mythxLogo from './../images/mythx.png'\nimport plus from './../images/plus.svg'\n\nfunction Home () {\n  return (\n    <>\n      <div className='h-100'\n        style={{ background: '#012A3E' }}>\n        <div className='d-flex align-items-end flex-column' style={{ height: '50%' }}>\n          <div className='mt-auto pb-5 w-100'>\n            <h1 className='display-1 text-white'\n              style={{ textAlign: 'center' }}>re:MythX</h1>\n          </div>\n        </div>\n        <div className='d-flex justify-content-center pt-4'>\n          <a href='https://remix.ethereum.org' target='_blank' rel='noopener noreferrer'>\n            <img src={remixLogo} alt='remix' style={{ height: 120, width: 120, verticalAlign: 'top' }} />\n          </a>\n          <img src={plus} alt='plus' className='pl-5 pr-5' style={{ height: 100, width: 140 }} />\n          <a href='https://mythx.io/' target='_blank' rel='noopener noreferrer'>\n            <img src={mythxLogo} alt='mythx' style={{ height: 130, width: 180, verticalAlign: 'top' }} />\n          </a>\n        </div>\n      </div>\n      <Footer />\n    </>\n  )\n}\n\nexport default Home\n","module.exports = __webpack_public_path__ + \"static/media/remix.0cc3e824.svg\";","module.exports = __webpack_public_path__ + \"static/media/mythx.5fc6cc7c.png\";","module.exports = __webpack_public_path__ + \"static/media/plus.bd770134.svg\";","import SourceMappingDecoder from 'remix-lib/src/sourceMappingDecoder'\n\nimport { isFatal, getUniqueIssues } from './eslint'\n\nconst mythx2Severity = {\n  High: 2,\n  Medium: 1\n}\n\nconst decoder = new SourceMappingDecoder()\n\n/**\n * Turn a srcmap entry (the thing between semicolons) into a line and\n * column location.\n * We make use of this.sourceMappingDecoder of this class to make\n * the conversion.\n *\n * @param {string} srcEntry - a single entry of solc sourceMap\n * @param {Array} lineBreakPositions - array returned by the function 'mapLineBreakPositions'\n * @returns {line: number, column: number}\n */\nconst textSrcEntry2lineColumn = (srcEntry, lineBreakPositions) => {\n  const ary = srcEntry.split(':')\n  const sourceLocation = {\n    length: parseInt(ary[1], 10),\n    start: parseInt(ary[0], 10)\n  }\n  const loc = decoder.convertOffsetToLineColumn(sourceLocation, lineBreakPositions)\n  return [loc.start, loc.end]\n}\n\n/**\n * Convert a MythX issue into an ESLint-style issue.\n * The eslint report format which we use, has these fields:\n *\n * - column,\n * - endCol,\n * - endLine,\n * - fatal,\n * - line,\n * - message,\n * - description,\n * - ruleId,\n * - ruleLink,\n * - severity\n *\n * but a MythX JSON report has these fields:\n *\n * - description.head\n * - description.tail\n * - locations\n * - severity\n * - swcId\n * - swcTitle\n *\n * @param {object} issue - the MythX issue we want to convert\n * @param {string} source - holds the contract code\n * @returns eslint-issue object\n */\nconst issue2EsLint = (issue, source, locations) => {\n  let swcLink\n\n  if (!issue.swcID) {\n    swcLink = 'N/A'\n  } else {\n    swcLink = 'https://swcregistry.io/docs/' + issue.swcID\n  }\n\n  const esIssue = {\n    fatal: false,\n    ruleId: issue.swcID,\n    ruleLink: swcLink,\n    message: `${issue.description.head}`,\n    description: `${issue.description.tail}`,\n    severity: mythx2Severity[issue.severity] || 1,\n    line: -1,\n    column: 0,\n    endLine: -1,\n    endCol: 0,\n    sourceType: '',\n    origin: issue\n  }\n\n  if (source) {\n    let startLineCol, endLineCol\n    const lineBreakPositions = decoder.getLinebreakPositions(source)\n\n    if (locations.length) {\n      const srcEntry = locations[0].sourceMap.split(';')[0];\n      [startLineCol, endLineCol] = textSrcEntry2lineColumn(srcEntry, lineBreakPositions)\n      esIssue.sourceType = locations[0].sourceType\n    }\n\n    if (startLineCol) {\n      esIssue.line = startLineCol.line\n      esIssue.column = startLineCol.column\n      esIssue.endLine = endLineCol.line\n      esIssue.endCol = endLineCol.column\n    }\n  }\n\n  return esIssue\n}\n\n/**\n * Gets the source index from the issue sourcemap\n *\n * @param {object[]} locations - array of text-only MythX API issue locations\n * @returns {number}\n */\nconst getSourceIndex = locations => {\n  if (locations.length) {\n    const sourceMapRegex = /(\\d+):(\\d+):(\\d+)/g\n    const match = sourceMapRegex.exec(locations[0].sourceMap)\n    // Ignore `-1` source index for compiler generated code\n    return match ? match[3] : 0\n  }\n\n  return 0\n}\n\n/**\n * Converts MythX analyze API output item to Eslint compatible object\n * @param {object} report - issue item from the collection MythX analyze API output\n * @param {object} data - Contains array of solidity contracts source code and the input filepath of contract\n * @returns {object}\n */\nconst convertMythXReport2EsIssue = (report, mapping, data) => {\n  const { issues } = report\n  const { sources, functionHashes } = data\n  const results = {}\n\n  const textLocationFilterFn = location => (\n    (location.sourceType === 'solidity-file') &&\n    (location.sourceFormat === 'text')\n  )\n\n  // eslint-disable-next-line array-callback-return\n  issues.map(issue => {\n    const locations = issue.locations.filter(textLocationFilterFn)\n    const location = locations.length ? locations[0] : undefined\n\n    let sourceCode = ''\n    let filePath = '<unknown>'\n\n    if (location) {\n      const sourceList = location.sourceList || report.sourceList || []\n      const sourceIndex = getSourceIndex(location)\n      const fileName = sourceList[sourceIndex]\n\n      if (fileName) {\n        filePath = mapping[fileName] || fileName\n\n        if (sources[filePath]) {\n          sourceCode = sources[filePath].content\n        }\n      }\n    }\n\n    if (!results[filePath]) {\n      results[filePath] = {\n        errorCount: 0,\n        warningCount: 0,\n        fixableErrorCount: 0,\n        fixableWarningCount: 0,\n        filePath,\n        functionHashes,\n        sourceCode,\n        messages: []\n      }\n    }\n\n    const message = issue2EsLint(issue, (sources[filePath] || {}).content, locations)\n    results[filePath].messages.push(message)\n  })\n\n  for (const k in results) {\n    if (Object.prototype.hasOwnProperty.call(results, k)) {\n      results[k].warningCount = results[k].messages.reduce((acc, { fatal, severity }) =>\n        !isFatal(fatal, severity) ? acc + 1 : acc, 0)\n\n      results[k].errorCount = results[k].messages.reduce((acc, { fatal, severity }) =>\n        isFatal(fatal, severity) ? acc + 1 : acc, 0)\n    }\n  }\n\n  return Object.values(results)\n}\n\nexport const formatIssues = (data, mapping, issues) => {\n  const results = {}\n  issues.forEach(report => {\n    convertMythXReport2EsIssue(report, mapping, data)\n      .forEach(issue => {\n        const result = results[issue.filePath]\n        if (!result) {\n          results[issue.filePath] = issue\n          return\n        }\n\n        results[issue.filePath] = {\n          errorCount: result.errorCount + issue.errorCount,\n          warningCount: result.warningCount + issue.warningCount,\n          fixableErrorCount: result.fixableErrorCount + issue.fixableErrorCount,\n          fixableWarningCount: result.fixableWarningCount + issue.fixableWarningCount,\n          filePath: result.filePath,\n          messages: [...result.messages, ...issue.messages]\n        }\n      })\n  })\n\n  const eslintIssues = Object.values(results)\n    .reduce((acc, curr) => acc.concat(curr), [])\n  return getUniqueIssues(eslintIssues)\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst KnownAddressMap = {\n  '0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe': 'Creator',\n  '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef': 'Attacker'\n}\n\nfunction IssueSteps ({ issue }) {\n  const { extra = {} } = issue\n  const { testCases = [] } = extra\n\n  if (!testCases.length) {\n    return null\n  }\n\n  return (\n    <div className='pt-1' style={{ fontSize: 14 }}>\n      <h6 className='bg-light p-1'>Steps to reproduce</h6>\n      {\n        testCases.map((tc, i) => {\n          return (\n            <div key={i} className=''>\n              {tc.steps.map((s, j) => {\n                const knownAddress = KnownAddressMap[s.origin]\n                return (\n                  <div key={j} className='pt-2'>\n                    <h6 className='font-weight-bold'>{`Transaction ${j + 1} ${j === 0 ? '(contract creation)' : ''}`}</h6>\n                    <div className='pl-3 text-truncate'>\n                      <div>\n                        <b>Sender:</b> {s.origin} {knownAddress ? `(${knownAddress})` : ''}\n                      </div>\n                      <div>\n                        <b>Value:</b> {s.value}\n                      </div>\n                      <div>\n                        <b>Function name:</b> {s.name || 'N/A'}\n                      </div>\n                      <div>\n                        <b>Calldata:</b> {s.input}\n                      </div>\n                      <div>\n                        <b>Decoded calldata:</b> {s.decodedInput || 'N/A'}\n                      </div>\n                    </div>\n                  </div>\n                )\n              })}\n              <hr />\n            </div>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nIssueSteps.propTypes = {\n  issue: PropTypes.object.isRequired\n}\n\nexport default IssueSteps\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Collapse } from 'reactstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCode, faAngleRight, faAngleDown } from '@fortawesome/free-solid-svg-icons'\n\nimport IssueSteps from './IssueSteps'\nimport { isFatal } from './../lib/eslint'\n\nfunction Issue ({ issue, highlightIssue }) {\n  const [isOpen, setIsOpen] = useState(false)\n  const toggle = () => setIsOpen(!isOpen)\n  return (\n    <>\n      <div>\n        {\n          issue.error\n            ? <div className='alert alert-danger p-1' style={{ padding: '.5rem' }}>\n              {issue.error}\n            </div>\n            : <>\n              <div className='d-flex flex-row'>\n                <button onClick={toggle} className='btn btn-link align-self-center pl-0 pr-2'>\n                  <FontAwesomeIcon icon={isOpen ? faAngleDown : faAngleRight} />\n                </button>\n                <button type='button'\n                  className={`btn ${isFatal(issue.fatal, issue.severity) ? 'btn-danger' : 'btn-warning'} text-left p-1 mb-1 w-100`}\n                  onClick={() => { highlightIssue(issue) }}>\n                  {issue.sourceType === 'raw-bytecode' &&\n                    <span title='raw-bytecode'>\n                      <FontAwesomeIcon className='float-right' style={{ fontSize: 10 }} icon={faCode} />\n                    </span>\n                  }\n                  <span className='pr-2'>{`[${issue.line + 1}:${issue.column}]`}</span>\n                  {issue.message}\n                </button>\n              </div>\n              <Collapse isOpen={isOpen}>\n                <div className='pl-3 pb-3'>\n                  <div style={{ fontSize: 13 }}>\n                    {issue.description}\n                    {issue.ruleId && <a href={issue.ruleLink} className='pl-1' target='_blank' rel='noopener noreferrer'>[{issue.ruleId}]</a>}\n                  </div>\n                  <IssueSteps issue={issue.origin} />\n                </div>\n              </Collapse>\n            </>\n        }\n      </div>\n    </>\n  )\n}\n\nIssue.propTypes = {\n  issue: PropTypes.object.isRequired,\n  highlightIssue: PropTypes.func.isRequired\n}\n\nexport default Issue\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Issue from './Issue'\n\nfunction Report ({ report, highlightIssue }) {\n  return (\n    <>\n      {\n        report.message &&\n        <div className='row'>\n          <div className='col-md-6 offset-md-3'>\n            <div className='alert alert-success w-100' role='alert'>\n              {report.message}\n            </div>\n          </div>\n        </div>\n      }\n      {\n        report.list &&\n        <div className='row'>\n          <div className='col-md-6 offset-md-3'>\n            {\n              report.list.map((x, i) => {\n                const issueCount = x.errorCount + x.warningCount\n                const summary = (amount, caption) => {\n                  return `${amount} ${amount === 1 ? caption : `${caption}s`}`\n                }\n                return (\n                  <div key={i} className='border-bottom pt-2 pb-2'>\n                    <div className='text-truncate font-weight-bold'>{x.filePath}</div>\n                    {\n                      x.messages.map((m, j) => <Issue key={j} issue={m} highlightIssue={(issue) => highlightIssue(x, issue)} />)\n                    }\n                    {\n                      !!issueCount &&\n                      <div>\n                        {`✖ ${summary(issueCount, 'issue')} (${summary(x.errorCount, 'error')}, ${summary(x.warningCount, 'warning')})`}\n                      </div>\n                    }\n                  </div>\n                )\n              })\n            }\n          </div>\n        </div>\n      }\n    </>\n  )\n}\n\nReport.propTypes = {\n  report: PropTypes.object.isRequired,\n  highlightIssue: PropTypes.func.isRequired\n}\n\nexport default Report\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport moment from 'moment'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faClock } from '@fortawesome/free-solid-svg-icons'\n\nfunction Log ({ list = [] }) {\n  return (\n    <div className='row'>\n      {\n        list.slice(0, 5)\n          .map((x, i) => {\n            const link = `https://dashboard.mythx.io/#/console/analyses/${x.uuid}`\n            return (\n              <div key={i} className='col-md-6 offset-md-3 pt-1 pb-1'>\n                <span className='pr-1 text-secondary'>[{moment(x.timestamp).format('L LTS')}]</span>\n                {x.mode === 'full'\n                  ? <>\n                    <FontAwesomeIcon icon={faClock} className='mr-1 text-warning' />\n                    Request for <b>{x.mode}</b> analysis has been submitted. See your results shortly at\n                  </>\n                  : <>Your <b>{x.mode}</b> analysis is completed. See your results at</>\n                }\n                <a href={link} className='pl-1' target='_blank' rel='noopener noreferrer'>{x.uuid}</a>\n              </div>\n            )\n          })\n      }\n    </div>\n  )\n}\n\nLog.propTypes = {\n  list: PropTypes.array.isRequired\n}\n\nexport default Log\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Tooltip } from 'reactstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons'\n\nfunction InfoIcon ({ children, placement, ...props }) {\n  const [isOpen, setIsOpen] = useState(false)\n\n  return (\n    <>\n      <FontAwesomeIcon className='ml-2' icon={faInfoCircle} {...props} />\n      <Tooltip placement={placement}\n        isOpen={isOpen}\n        autohide={false}\n        target={props.id}\n        toggle={() => { setIsOpen(!isOpen) }}>\n        {children}\n      </Tooltip>\n    </>\n  )\n}\n\nInfoIcon.propTypes = {\n  id: PropTypes.string.isRequired,\n  children: PropTypes.node\n}\n\nexport default InfoIcon\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faClipboard, faTrash } from '@fortawesome/free-solid-svg-icons'\nimport {\n  Nav,\n  NavItem,\n  NavLink,\n  TabContent,\n  TabPane,\n  ButtonGroup,\n  ButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Alert\n} from 'reactstrap'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\n\nimport Report from './Report'\nimport Log from './Log'\nimport InfoIcon from './InfoIcon'\n\nconst separator = ' - '\n\nfunction Plugin ({\n  compilations,\n  contractList,\n  selected,\n  isAnalyzing,\n  analyses,\n  reports,\n  selectContract,\n  pluginActiveTab,\n  analyze,\n  addAlert,\n  highlightIssue,\n  clear,\n  changeTab,\n  log\n}) {\n  const [isAnalyzeDropdownOpen, setIsAnalyzeDropdownOpen] = useState(false)\n  const [, target] = selected.split(separator)\n\n  const isAnalyzeAllowed = (() => {\n    const [contract] = selected.split(separator)\n\n    if (!compilations[target]) {\n      return false\n    }\n\n    const { data = {} } = compilations[target]\n    const { contracts = [] } = data\n\n    const file = contracts[target]\n    const { bytecode } = file[contract].evm\n\n    return bytecode && bytecode.object && bytecode.object.length\n  })()\n\n  const isAnalyzeDisabled = isAnalyzing || !isAnalyzeAllowed\n\n  return (\n    <div className='container'>\n      <div className='row'>\n        <div className='col-md-6 offset-md-3'>\n          {\n            target\n              ? <>\n                <div className='d-flex pb-3'>\n                  <div className='w-100'>\n                    <select\n                      className='form-control'\n                      value={selected}\n                      onChange={(e) => selectContract(e.target.value)}\n                      disabled={isAnalyzing}\n                    >\n                      {contractList.map((x, i) =>\n                        <option key={i} value={x}>{x}</option>\n                      )}\n                    </select>\n                  </div>\n                  <div className='flex-shrink-1'>\n                    <button\n                      type='button'\n                      className='form-control btn ml-2'\n                      title='Clear'\n                      onClick={clear}\n                      disabled={isAnalyzing}>\n                      <FontAwesomeIcon icon={faTrash} />\n                    </button>\n                  </div>\n                </div>\n                {\n                  !isAnalyzeAllowed &&\n                  <Alert color='warning' style={{ padding: '.5rem 2.9rem .5rem .5rem' }}>\n                    This contract is abstract, it is not possible to analyze.\n                  </Alert>\n                }\n                <div>\n                  <ButtonGroup>\n                    <ButtonDropdown\n                      isOpen={isAnalyzeDropdownOpen}\n                      toggle={() => setIsAnalyzeDropdownOpen(!isAnalyzeDropdownOpen)}>\n                      <button\n                        type='button'\n                        className='btn btn-primary'\n                        onClick={() => analyze()}\n                        disabled={isAnalyzeDisabled}>\n                        {\n                          isAnalyzing\n                            ? <span className='spinner-border spinner-border-sm' role='status' aria-hidden='true'></span>\n                            : <div>Analyze</div>\n                        }\n                      </button>\n                      <DropdownToggle caret disabled={isAnalyzeDisabled} className='btn-primary' />\n                      <DropdownMenu>\n                        <DropdownItem onClick={() => analyze()} disabled={isAnalyzeDisabled}>Analyze</DropdownItem>\n                        <DropdownItem onClick={() => analyze('standard')} disabled={isAnalyzeDisabled}>Analyze (Standard)</DropdownItem>\n                        <DropdownItem onClick={() => analyze('deep')} disabled={isAnalyzeDisabled}>Analyze (Deep)</DropdownItem>\n                      </DropdownMenu>\n                    </ButtonDropdown>\n                  </ButtonGroup>\n                  <InfoIcon id='analysis_info' placement='bottom'>\n                    <div>Analysis can take couple</div>\n                    <div>of minutes. <b>Standard</b> mode</div>\n                    <div>takes approx 25 minutes.</div>\n                    <div><b>Deep</b> takes approx 70 minutes.</div>\n                  </InfoIcon>\n                  {\n                    isAnalyzing &&\n                    <div style={{ fontSize: 14, fontWeight: 'bold' }}>\n                      We are analyzing your contract. This should take up to 2 minutes\n                    </div>\n                  }\n                </div>\n              </>\n              : <div className='alert alert-warning w-100' role='alert' style={{ padding: '.5rem' }}>\n                You need to compile your contract first!\n              </div>\n          }\n        </div>\n      </div>\n      <Nav tabs className='pt-1'>\n        <NavItem>\n          <NavLink\n            href='#'\n            className={pluginActiveTab === 'log' ? 'active' : null}\n            onClick={() => changeTab('log')}\n          >\n            Log\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            href='#'\n            className={pluginActiveTab === 'report' ? 'active' : null}\n            onClick={() => changeTab('report')}\n          >\n            Report\n          </NavLink>\n        </NavItem>\n      </Nav>\n      <TabContent activeTab={pluginActiveTab}>\n        <TabPane tabId='log'>\n          <Log list={log} />\n        </TabPane>\n        <TabPane tabId='report'>\n          {\n            analyses[selected] &&\n            <div className='text-right'>\n              <CopyToClipboard\n                text={JSON.stringify(analyses[selected])}\n                onCopy={() => addAlert('success', 'Copied')}>\n                <button type='button' className='btn' title='Copy raw report to clipboard'>\n                  <FontAwesomeIcon className='ml-2' icon={faClipboard} /><span className='pl-1'>Raw report</span>\n                </button>\n              </CopyToClipboard>\n            </div>\n          }\n          <Report report={reports[selected] || {}} highlightIssue={highlightIssue} />\n        </TabPane>\n      </TabContent>\n    </div>\n  )\n}\n\nPlugin.propTypes = {\n  addAlert: PropTypes.func.isRequired,\n  contractList: PropTypes.array.isRequired,\n  selected: PropTypes.string.isRequired,\n  isAnalyzing: PropTypes.bool.isRequired,\n  analyses: PropTypes.object.isRequired,\n  reports: PropTypes.object.isRequired,\n  selectContract: PropTypes.func.isRequired,\n  highlightIssue: PropTypes.func.isRequired,\n  clear: PropTypes.func.isRequired,\n  changeTab: PropTypes.func.isRequired\n}\n\nexport default Plugin\n","export const isFatal = (fatal, severity) => fatal || severity === 2\n\nconst getUniqueMessages = messages => {\n  const jsonValues = messages.map(m => JSON.stringify(m))\n  const uniuqeValues = jsonValues.reduce((accum, curr) => {\n    if (accum.indexOf(curr) === -1) {\n      accum.push(curr)\n    }\n    return accum\n  }, [])\n\n  return uniuqeValues.map(v => JSON.parse(v))\n}\n\nconst calculateErrors = messages =>\n  messages.reduce((acc, { fatal, severity }) => isFatal(fatal, severity) ? acc + 1 : acc, 0)\n\nconst calculateWarnings = messages =>\n  messages.reduce((acc, { fatal, severity }) => !isFatal(fatal, severity) ? acc + 1 : acc, 0)\n\nexport const getUniqueIssues = issues =>\n  issues.map(({ messages, ...restProps }) => {\n    const uniqueMessages = getUniqueMessages(messages)\n    const warningCount = calculateWarnings(uniqueMessages)\n    const errorCount = calculateErrors(uniqueMessages)\n\n    return {\n      ...restProps,\n      messages: uniqueMessages,\n      errorCount,\n      warningCount\n    }\n  })\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCog } from '@fortawesome/free-solid-svg-icons'\n\nimport packageJson from './../../package.json'\n\nfunction Footer ({ isPlugin, openSettings }) {\n  const links = (\n    <>\n      <a href={`https://github.com/aquiladev/remix-mythx-plugin/releases/tag/${packageJson.version}`} target='_block' rel='noopener noreferrer'>\n        {packageJson.version}\n      </a> | <a href='https://discord.gg/VhdtjCh' target='_blank' rel='noopener noreferrer'>Get support</a>\n    </>\n  )\n\n  return (\n    <>\n      {\n        isPlugin\n          ? <div className={'position-absolute w-100 pb-1 d-flex'} style={{ fontSize: 12, bottom: 0 }}>\n            <div>\n              <button\n                className='btn btn-light ml-1 p-1'\n                style={{ fontSize: 12 }}\n                onClick={openSettings}>\n                <FontAwesomeIcon icon={faCog} size='lg' className='mr-1' />\n                MythX Settings\n              </button>\n            </div>\n            <div className='ml-auto mr-1'>\n              <div className={'position-absolute'} style={{ right: 4, bottom: 4 }}>{links}</div>\n            </div>\n          </div>\n          : <div className={'position-absolute text-center w-100 pb-1 text-white'} style={{ fontSize: 12, bottom: 0 }}>\n            {links}\n          </div>\n      }\n    </>\n  )\n}\n\nFooter.propTypes = {\n  isPlugin: PropTypes.bool,\n  openSettings: PropTypes.func\n}\n\nexport default Footer\n"],"sourceRoot":""}